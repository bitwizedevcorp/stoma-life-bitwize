// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["linux-musl", "native","linux-arm64-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "debian-openssl-1.1.x"]

}

datasource db {
  provider = "mysql"
  url      = "mysql://root:Devbitwize99!!@bitwize-db.c92gw0ceqmta.eu-central-1.rds.amazonaws.com:3306/bitwize?schema=public"
}


model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  surrname      String
  email         String   @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  admin         Boolean?
  pacientTable  String?
  judet         String
  oras          String
  numar_telefon String
}



model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}


model Pacient {
  id         Int  @id @default(autoincrement())
  // doctor   User     @relation(fields: [doctorId], references: [id])
  doctorId   String
  first_name String
  last_name  String
  email String?
  telefon String
  cnp String @unique
  date_of_birth String
  judet String
  town String
  street String?
  number String?
  bloc String?
  scara String?
  apartament String?
  istoricPacientId String?
   createdAt    DateTime @default(now())

}

model PacientToFiles {
    id Int @id @default(autoincrement())
    pacientId Int
    eTagFile String
    createdAt DateTime @default(now())
}
